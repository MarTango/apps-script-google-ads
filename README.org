* Apps Scripts Google Ads


** Installation
   Go to =Resources= > =Libraries= > =Add a Library= and paste in the
   following project key: =MRDBj7vHnHOuhmWj8lguWIrgDLth4o_FN=
** GoogleAdsClient
  A thin wrapper for the Google Ads API (Beta) providing a single
  class [[src/GoogleAdsClient.js][GoogleAdsClient]] as the entrypoint.

*** How to use
    1. Instantiate the client with an access token, adwords developer
       token and login customer ID (not required if using
       =CustomerService=).
    2. Use =client.getService(serviceName)= to fetch an instance of that
       service (currently supports =GoogleAdsService=, =CustomerService=,
       and most ={entity}Service= s that contain =mutate{entity}s= and
       =get{entity}= methods.

*** Notes
    - If you want to use the adwords API in limited [[https://developers.google.com/apps-script/reference/script/auth-mode][AuthMode]]
      (e.g. custom functions in spreadsheets) then you'll need to
      manually handle OAuth2 (e.g with [[https://github.com/gsuitedevs/apps-script-oauth2][apps-script-oauth2]]). Otherwise,
      you can add "https://www.googleapis.com/auth/adwords" to the
      "oauthScopes" property in the [[https://developers.google.com/apps-script/concepts/scopes#setting_explicit_scopes][manifest file]] to use
      =ScriptApp.getOAuthToken()=.
    - This has not been tested (nor used) very thoroughly.

** Example usage

*** Copying the first campaign that appears in a search:

   #+BEGIN_SRC javascript
     var developerToken = "insert_developer_token";
     var loginCustomerId = "insert_login_customer_id"
     var clientCustomerId = "insert_customer_id";

     var client = new GoogleAdsClient(ScriptApp.getOAuthToken(), developerToken, loginCustomerId);
     var gads = client.getService("GoogleAdsService");

     var response = gads.search({
       customerId: clientCustomerId,
       query: "SELECT campaign.id, campaign.name FROM campaign WHERE campaign.status != 'REMOVED' LIMIT 1"
     });
     var campaign = response.results[0].campaign;

     var service = client.getService('CampaignService');
     campaign = service.getCampaign(clientCustomerId, campaign.id);
     Logger.log(campaign);

     campaign.startDate = null;
     campaign.endDate = null;
     campaign.resourceName = null;
     campaign.name = campaign.name + "_APPS_SCRIPT";

     var mutateResponse = service.mutateCampaigns({
       customerId: clientCustomerId,
       operations: {
         create: campaign
       }
     });
     Logger.log(mutateResponse);
   #+END_SRC

*** Modifying a campaign's positive geo target type to "LOCATION_OF_PRESENCE"
    #+begin_src javascript
      function test() {
        var client = new GoogleAdsClient(
          ScriptApp.getOAuthToken(),
          developerToken,
          loginCustomerId
        );

        var s = client.getService("GoogleAdsService");

        var result = s.search({
          customerId: customerId,
          query: "SELECT campaign.id, campaign.geo_target_type_setting.positive_geo_target_type"
            + " FROM campaign WHERE campaign.name LIKE \"%martin%\""
            + " AND campaign.status != REMOVED"
            + " AND campaign.geo_target_type_setting.positive_geo_target_type = DONT_CARE"
            + " LIMIT 1"
        });

        var campaign = result.results[0].campaign;

        Logger.log(campaign);

        campaign.geoTargetTypeSetting.positiveGeoTargetType = "LOCATION_OF_PRESENCE";

        var campaignService = client.getService("CampaignService");

        var resp = campaignService.mutateCampaigns({
          customerId: customerId,
          operations: [{
            update: campaign,
            updateMask:  "geoTargetTypeSetting.positiveGeoTargetType"
          }]
        });

        Logger.log(resp.results[0].resourceName);

      }

    #+end_src
